/***

Kanwal (2017) BDA modeling.

We represent each participant as an RSA speaker employing
one of several strategies (see strategies.md for more description).

In this BDA we infer the parameters for each strategy.

***/

var alphaDistr = Uniform({a:1, b:16})
var alphaPrior = function() {
  return sample(alphaDistr)
}

// Costs
var costTypes = ['present', 'not_present', 'reverse']
var costsTypeDistr = Categorical({vs:costTypes, ps:[1, 1, 1]})
var costsTypePrior = function() {
  return sample(costsTypeDistr)
}
var getCosts = function(costType){
  if (costType == 'present') {
    return {
        'zop': 0.3, 
        'zopekil': 0.7,
        'zopudon': 0.7
      }
  } else if (costType == 'not_present') {
    return {
        'zop': 0.0,
        'zopekil': 0.0,
        'zopudon': 0.0
      }
  } else if (costType == 'reverse') {
    return {
        'zop': 0.7,
        'zopekil': 0.3,
        'zopudon': 0.3
      }
  } 
}

// Semantics
var semanticsTypes = ['natural', 'none']
var semanticsTypesDistr = Categorical({vs: semanticsTypes, ps: [1, 1]})
var semanticsTypesPrior = function() {
  return sample(semanticsTypesDistr)
}

// Recursion
var recursionLevels = [1, 2]
var recursionLevelsDistr = Categorical({vs: recursionLevels, ps: [1, 1]})
var recursionLevelsPrior = function() {
  return sample(recursionLevelsDistr)
}

// need probability priors
var needProbTypes = ['present', 'not_present', 'reverse']
var needProbTypesDistr = Categorical({vs: needProbTypes, ps: [1, 1, 0.1]})
var needProbTypesPrior = function() {
  return sample(needProbTypesDistr)
}

var model = function(d) {
  var _model = function() {
 
    // Infer params
    var alpha = alphaPrior()
    var costsType = costsTypePrior()
    var semanticsType = semanticsTypesPrior()
    var recursionLevel = recursionLevelsPrior()
    var needProbType = needProbTypesPrior()

    // Utteranecs
    var utterances = ['zop', 'zopekil', 'zopudon']
    var utterancesDistr = Categorical({vs:utterances, ps:[1, 1, 1]})
    var utterancesPrior = function() { 
      return sample(utterancesDistr)
    }

    // Worlds
    var getNeedProbWeights = function(needProbType) {
      if (needProbType == 'present') {
        return [24, 8]
      } else if (needProbType == 'not_present') {
        return [1, 1]
      } else if (needProbType == 'reverse') {
        return [8, 24]
      }
    }
    var worldsPriorWeights = getNeedProbWeights(needProbType)
    var worlds = [{'d':'zopudon'}, {'d':'zopekil'}]
    var worldsDistr = Categorical({vs: worlds, ps: worldsPriorWeights})
    var worldsPrior = function() { 
      return sample(worldsDistr)
    }

    var cost = function(utterance, costsType) {
      var costs = getCosts(costsType)
      return costs[utterance]
    }

    var utteranceMeaning = function(u, semanticsType) {
      if (semanticsType == "natural") {
        if (u == 'zop') {
          return uniformDraw(['zopekil', 'zopudon'])
        } else {
          return u
        } 
      } else if (semanticsType == "none") {
        return uniformDraw(['zopekil', 'zopudon'])
      } else if (semanticsType == 'zop_tethered_frequent') {
        if (u == 'zop') {
            return 'zopudon'
        } else {
          return u
        }
      } else if (semanticsType == 'zop_tethered_infrequent') {
        if (u == 'zop') {
            return 'zopekil'
        } else {
          return u
        }
      }
    }

    var litMeaning = function(utterance, world) {
      return utterance == world['d']
    }

    var L0 = cache(function(utterance) {
      Infer({
        model() {
          var world = worldsPrior()
          var meaning = litMeaning(utteranceMeaning(utterance, semanticsType), world)
          factor(meaning ? 0 : -Infinity)
          return world
        }
      })
    })

    var S1 = cache(function(world) {
      Infer({
        model() {
          var utterance = utterancesPrior()
          var L = L0(utterance)
          factor(alpha * (L.score(world) - cost(utterance, costsType)))
          return utterance
        }
      })
    })

    var L1 = cache(function(utterance) {
      Infer({
        model() {
          var world = worldsPrior()
          var meaning = litMeaning(utteranceMeaning(utterance, semanticsType), world)
          var S = S1(world)
          factor(S.score(utterance))
          return world
        }
      })
    })

    var S2 = cache(function(world) {
      Infer({
        model() {
          var utterance = utterancesPrior()
          var L = L1(utterance)
          factor(alpha * (L.score(world) - cost(utterance, costsType)))
          return utterance
        }
      })
    })
    
    var getModel = function(recursionLevel) {
      if (recursionLevel == 1) {
        return S1
      } else if (recursionLevel == 2) {
        return S2
      }
    }

    var runSpeaker = function(n, typ) {
      Infer({
        method: "MCMC", 
        samples: 200, 
        burn: 50,
        model() {
          var _getProportion = function(data, target) {
            return filter(function(x) {return x == target}, data).length / data.length
          }
          var Model = getModel(recursionLevel)
          var world = typ == 'frequent' ? {d:'zopudon'} : {d:'zopekil'}
          var data = repeat(n, function() {
            return sample(Model(world))
          })
          var prop = _getProportion(data, 'zop')
          return prop
        }
      })
    }

    var frequent_prop = d['frequent']
    var infrequent_prop = d['infrequent']
    observe(runSpeaker(100, 'frequent', recursionLevel, semanticsType), frequent_prop)
    observe(runSpeaker(100, 'infrequent', recursionLevel, semanticsType), infrequent_prop)
    return {'alpha': alpha, 
            'costsType': costsType, 
            'recursionLevel': recursionLevel,
            'semanticsType': semanticsType,
            'needProbType': needProbType }
  }
  return _model
}

var opts = {method: "MCMC",
            onlyMAP:true, 
            samples: 200, 
            burn: 50 };

var res = map(function(x) {
  console.log('Current IP:', x['IP'])
  var currModel = model(x)
  var currPosterior = Infer(opts, currModel)
  var currAlpha = sample(marginalize(currPosterior, function(x) {
    return x['alpha']
  }))
  var currCostsType = sample(marginalize(currPosterior, function(x) {
    return x['costsType']
  }))
  var recursionLevel = sample(marginalize(currPosterior, function(x) {
    return x['recursionLevel']
  }))
  var semanticsType = sample(marginalize(currPosterior, function(x) {
    return x['semanticsType']
  }))
  var needProbType = sample(marginalize(currPosterior, function(x) {
    return x['needProbType']
  }))
  var cond = x['condition']
  
  return {'IP': x['IP'],
          'alpha': currAlpha,
          'costsType': currCostsType,
          'semanticsType': semanticsType,
          'recursionLevel': recursionLevel,
          'needProbType': needProbType,
          'condition': cond
         }
}, rData)

res

