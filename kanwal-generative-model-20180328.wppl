/***
Kanwal (2017) posterior predictive modeling.

Input: inferred params for each participant
Outpu: proportions

***/

var getCosts = function(costType){
  if (costType == 'present') {
    return {
        'zop': 0.3,
        'zopekil': 0.7,
        'zopudon': 0.7
      }
  } else if (costType == 'not_present') {
    return {
        'zop': 0.0,
        'zopekil': 0.0,
        'zopudon': 0.0
      }
  } else if (costType == 'reversed') {
    return {
        'zop': 0.7,
        'zopekil': 0.3,
        'zopudon': 0.3
      }
  }
}


//  Strategies - save these for now
var combination = {
  "alpha": 6,
  "costsType": "present",
  "semanticsType": "present",
  "recursionLevel": 2,
  "priors": "present"
}

var accuracy = {
  "alpha": 12,
  "costsType": "not_present",
  "semanticsType": "present",
  "recursionLevel": 1,
  "priors": "present"
}

var time = {
  "alpha": 6,
  "costsType": "present",
  "semanticsType": "not_present",
  "recursionLevel": 1,
  "priors": "not_present"
}

var neither = {
  "alpha": 6,
  "costsType": "not_present",
  "semanticsType": "not_present",
  "recursionLevel": 2,
  "priors": "not_present"
}

var other = {
  "alpha": 10,
  "costsType": "present",
  "semanticsType": "present",
  "recursionLevel": 2,
  "priors": "reversed"
}

var run = function(world, d) {
  // Infer params
  var alpha = d["alpha"]
  var costsType = d["costsType"]
  var semanticsType = d["semanticsType"]
  var recursionLevel = d["recursionLevel"]
  var needProbType = d["needProbType"]

  // Utteranecs
  var utterances = ['zop', 'zopekil', 'zopudon']
  var utterancesDistr = Categorical({vs:utterances, ps:[1, 1, 1]})
  var utterancesPrior = function() { 
    return sample(utterancesDistr)
  }

  // Worlds
  var getNeedProbWeights = function(needProbType) {
    if (needProbType == 'present') {
      return [24, 8]
    } else if (needProbType == 'not_present') {
      return [1, 1]
    } else if (needProbType == 'reversed') {
      return [8, 24]
    }
  }
  var worldsPriorWeights = getNeedProbWeights(needProbType)
  var worlds = [{'d':'zopudon'}, {'d':'zopekil'}]
  var worldsDistr = Categorical({vs: worlds, ps: worldsPriorWeights})
  var worldsPrior = function() { 
    return sample(worldsDistr)
  }

  var cost = function(utterance, costsType) {
    var costs = getCosts(costsType)
    return costs[utterance]
  }

  var utteranceMeaning = function(u, semanticsType) {
    if (semanticsType == "natural") {
      if (u == 'zop') {
        return uniformDraw(['zopekil', 'zopudon'])
      } else {
        return u
      } 
    } else if (semanticsType == "none") {
      return uniformDraw(['zopekil', 'zopudon'])
    } else if (semanticsType == 'zop_tethered_frequent') {
      if (u == 'zop') {
        return 'zopudon'
      } else {
        return u
      }
    } else if (semanticsType == 'zop_tethered_infrequent') {
      if (u == 'zop') {
        return 'zopekil'
      } else {
        return u
      }
    }
  }

  var litMeaning = function(utterance, world) {
    return utterance == world['d']
  }

  var L0 = cache(function(utterance) {
    Infer({
      model() {
        var world = worldsPrior()
        var meaning = litMeaning(utteranceMeaning(utterance, semanticsType), world)
        factor(meaning ? 0 : -Infinity)
        return world
      }
    })
  })

  var S1 = cache(function(world) {
    Infer({
      model() {
        var utterance = utterancesPrior()
        var L = L0(utterance)
        factor(alpha * (L.score(world) - cost(utterance, costsType)))
        return utterance
      }
    })
  })

  var L1 = cache(function(utterance) {
    Infer({
      model() {
        var world = worldsPrior()
        var meaning = litMeaning(utteranceMeaning(utterance, semanticsType), world)
        var S = S1(world)
        factor(S.score(utterance))
        return world
      }
    })
  })

  var S2 = cache(function(world) {
    Infer({
      model() {
        var utterance = utterancesPrior()
        var L = L1(utterance)
        factor(alpha * (L.score(world) - cost(utterance, costsType)))
        return utterance
      }
    })
  })

  var L2 = cache(function(utterance) {
    Infer({
      model() {
        var world = worldsPrior()
        var meaning = litMeaning(utteranceMeaning(utterance, semanticsType), world)
        var S = S2(world)
        factor(S.score(utterance))
        return world
      }
    })
  })

  var S3 = cache(function(world) {
    Infer({
      model() {
        var utterance = utterancesPrior()
        var L = L2(utterance)
        factor(alpha * (L.score(world) - cost(utterance, costsType)))
        return utterance
      }
    })
  })

  var SRandom = cache(function(world) {
    Infer({
      model () {
        var utterance = utterancesPrior()
        return utterance
      }
    })
  })

  var getModel = function(recursionLevel) {
    if (recursionLevel == 0) {
      return SRandom
    } else if (recursionLevel == 1) {
      return S1
    } else if (recursionLevel == 2) {
      return S2
    } else if (recursionLevel == 3) {
      return S3
    }
  }

  var _model = getModel(recursionLevel)
  return sample(_model(world))
}
  
// var w_frequent = {d:'zopudon'}

// run(w_frequent,
//     {
//   "IP":"100.10.40.83",
//   "alpha":18,
//   "costsType":"present",
//   "recursionLevel":2,
//   "semanticsType":"present",
//   "needProbType":"present"})


var data = {
  "frequent": 24,
  "infrequent": 8
}

var runExperiment = function(inferredStrategy, data) {
  // Number of trials
  var n_frequent = data['frequent']
  var n_infrequent = data['infrequent']
  var trials_frequent =  _.range(n_frequent)
  var trials_infrequent =  _.range(n_infrequent)
  // Worlds
  var w_frequent = {d:'zopudon'}
  var w_infrequent = {d:'zopekil'}
  
  // Run frequent trials
  var d_frequent = map(function(x) {
    var utterance = run(w_frequent, inferredStrategy)
    return {
      "IP": inferredStrategy["IP"],
      "condition": inferredStrategy["condition"],
      "trialType": "frequent",
      "trialNum": x,
      "utterance": utterance
    }}, trials_frequent)

  // Run infrequent trials
  var d_infrequent = map(function(x) {
    var utterance = run(w_infrequent, inferredStrategy)
    return {
      "IP": inferredStrategy["IP"],
      "condition": inferredStrategy["condition"],
      "trialType": "infrequent",
      "trialNum": x,
      "utterance": utterance
    }}, trials_infrequent)
  var allData = d_frequent.concat(d_infrequent)
  return allData
}

var experimentalData = [{"IP":"68.194.164.153","alpha":18,"costsType":"not_present","recursionLevel":3,"semanticsType":"natural","needProbType":"not_present","condition":"accuracy"},{"IP":"115.99.18.32","alpha":5,"costsType":"not_present","recursionLevel":1,"semanticsType":"natural","needProbType":"present","condition":"combined"},{"IP":"182.65.31.144","alpha":3,"costsType":"present","recursionLevel":2,"semanticsType":"natural","needProbType":"present","condition":"combined"},{"IP":"107.161.163.8","alpha":11,"costsType":"not_present","recursionLevel":1,"semanticsType":"natural","needProbType":"present","condition":"combined"},{"IP":"216.21.204.80","alpha":19,"costsType":"present","recursionLevel":3,"semanticsType":"natural","needProbType":"present","condition":"neither"},{"IP":"50.153.191.59","alpha":15,"costsType":"not_present","recursionLevel":3,"semanticsType":"natural","needProbType":"not_present","condition":"accuracy"},{"IP":"50.157.182.233","alpha":17,"costsType":"not_present","recursionLevel":3,"semanticsType":"natural","needProbType":"not_present","condition":"accuracy"},{"IP":"108.210.65.252","alpha":13,"costsType":"not_present","recursionLevel":2,"semanticsType":"natural","needProbType":"not_present","condition":"accuracy"},{"IP":"71.112.135.232","alpha":16,"costsType":"not_present","recursionLevel":2,"semanticsType":"natural","needProbType":"not_present","condition":"accuracy"},{"IP":"65.28.161.177","alpha":14,"costsType":"present","recursionLevel":2,"semanticsType":"none","needProbType":"not_present","condition":"time"},{"IP":"163.47.15.206","alpha":6,"costsType":"not_present","recursionLevel":1,"semanticsType":"natural","needProbType":"present","condition":"combined"},{"IP":"66.56.8.213","alpha":5,"costsType":"present","recursionLevel":1,"semanticsType":"natural","needProbType":"present","condition":"combined"},{"IP":"96.60.207.27","alpha":7,"costsType":"present","recursionLevel":2,"semanticsType":"none","needProbType":"present","condition":"time"},{"IP":"67.44.209.240","alpha":15,"costsType":"present","recursionLevel":1,"semanticsType":"natural","needProbType":"not_present","condition":"neither"},{"IP":"68.184.74.170","alpha":3,"costsType":"present","recursionLevel":1,"semanticsType":"none","needProbType":"present","condition":"time"}]
var n_participants = 30
var runExperiments = function(n_participants, data, strategyName) {
  return map(function(x) {
    runExperiment(x, data)
  }, experimentalData)
}

var flatten = function(arr) {
  return [].concat.apply([], arr)
}
var res = runExperiments(n_participants, data, 'other')
flatten(res)