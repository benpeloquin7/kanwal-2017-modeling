// Meanings and utterances
var utterances = ['zop', 'zopudon', 'zopekil']
var utterancesPrior = function() {
  return uniformDraw(utterances)
}
var meanings = ['zopudon', 'zopekil']


var litMeaning = function(u, m) {
  // Literal semantics function.
  // \delta(u, m) returns 0/1
  return u == 'zop' ? true : u == m
}

var L0 = cache(function(u, params) {
  /* Literal listener

  Recursion base-case, reasons about literal semantics.

  */
	Infer({method: 'enumerate'}, function() {
      var m = categorical({vs: meanings, ps: params['pMeanings']})
      condition(litMeaning(u, m))
      return m
    })
})

var S1 = cache(function(m, params) {
  /* First order speaker

  Reasons abou literal listener.

  Chooses an utterances by considering the it's cost and the
  informativity w.r.t to the listener.

  */
	Infer({method: 'enumerate'}, function()  {
      var u = utterancesPrior()
      var L = L0(u, params)
      factor(params['alpha'] * (L.score(m) - cost(u, params)))
      return u
    })
})

var L1 = cache(function(u, params) {
  /* First order listener

  Reasons about S1 speaker.

  Chooses an utterances by considering the it's cost and the
  informativity w.r.t to the listener.

  */
	Infer({method: 'enumerate'}, function() {
      var m = categorical({vs: meanings, ps: params['pMeanings']})
      var S = S1(m, params)
      factor(S.score(u))
      return m
    })
})

var S2 = cache(function(m, params) {
	Infer({method: 'enumerate'}, function()  {
      var u = utterancesPrior()
      var L = L1(u, params)
      factor(params['alpha'] * (L.score(m) - cost(u, params)))
      return u
    })
})

var L2 = cache(function(u, params) {
	Infer({method: 'enumerate'}, function() {
      var m = categorical({vs: meanings, ps: params['pMeanings']})
      var S = S2(m, params)
      factor(S.score(u))
      return m
    })
})

var S3 = cache(function(m, params) {
	Infer({method: 'enumerate'}, function()  {
      var u = utterancesPrior()
      var L = L2(u, params)
      factor(params['alpha'] * (L.score(m) - cost(u, params)))
      return u
    })
})

var getSpeakerModel = function(conditionType, depth) {
  /*
  Return a speaker model's recursive depth (1-3)

  Note that if condition is time (or neither) there 
  is no listener.
  */
  var recursiveSpeakers = {
    '1': S1,
    '2': S2,
    '3': S3
  }
  return conditionType == 'time' ? S0 : recursiveSpeakers[depth]
}

var getConditionParams = cache(function(conditionType) {
  /*

  Get condition params (conditions as instantiate din Kanwall (2017)

  https://www.ncbi.nlm.nih.gov/pubmed/28494263

  */
  var params = {
    'combined': {'costs': [1, 2, 2], 'pMeanings': [24, 8]},
    'conventionalized': {'costs': [1, 2, 2], 'pMeanings': [8, 24]},
    'accuracy': {'costs': [1, 1, 1],  'pMeanings': [24, 8]},
    'time': {'costs': [1, 2, 2], 'pMeanings': [24, 8]},
    'neither': {'costs': [1, 1, 1], 'pMeanings': [24, 8]}
  }
  return params[conditionType]
})

var getSubjectParams = function(IP) {
  var data = filter(function(x) {x['IP'] == IP}, particpantParams)
  console.log(data)
  return data
}

var getSpeakerAndParams = function(params) {
  var alpha = params['alpha']
  var depth = params['depth']
  var conditionType = params['inferredCondition']
  var conditionParams = getConditionParams('conditionType')
  var speakerModel = getSpeakerModel(conditionType, depth)
  var newParams = _.merge(conditionParams, {'alpha': alpha, 'depth': depth})
  return [speakerModel, newParams]
}

var participantData = {"107.161.163.8": [{"infrequent": 1}, {"infrequent": 1, "frequent": 1}, {"infrequent": 1, "frequent": 2}, {"infrequent": 1, "frequent": 3}, {"infrequent": 2, "frequent": 3}, {"infrequent": 2, "frequent": 4}, {"infrequent": 2, "frequent": 5}, {"infrequent": 3, "frequent": 5}, {"infrequent": 4, "frequent": 5}, {"infrequent": 4, "frequent": 6}, {"infrequent": 4, "frequent": 7}, {"infrequent": 5, "frequent": 7}, {"infrequent": 5, "frequent": 8}, {"infrequent": 5, "frequent": 9}, {"infrequent": 5, "frequent": 10}, {"infrequent": 5, "frequent": 11}, {"infrequent": 5, "frequent": 12}, {"infrequent": 5, "frequent": 13}, {"infrequent": 5, "frequent": 14}, {"infrequent": 6, "frequent": 14}, {"infrequent": 6, "frequent": 15}, {"infrequent": 6, "frequent": 16}, {"infrequent": 7, "frequent": 16}, {"infrequent": 7, "frequent": 17}, {"infrequent": 7, "frequent": 18}, {"infrequent": 7, "frequent": 19}, {"infrequent": 7, "frequent": 20}, {"infrequent": 7, "frequent": 21}, {"infrequent": 7, "frequent": 22}, {"infrequent": 7, "frequent": 23}, {"infrequent": 7, "frequent": 24}], "74.87.33.130": [{"frequent": 1}, {"infrequent": 1, "frequent": 1}, {"infrequent": 1, "frequent": 2}, {"infrequent": 2, "frequent": 2}, {"infrequent": 2, "frequent": 3}, {"infrequent": 3, "frequent": 3}, {"infrequent": 3, "frequent": 4}, {"infrequent": 3, "frequent": 5}, {"infrequent": 3, "frequent": 6}, {"infrequent": 3, "frequent": 7}, {"infrequent": 4, "frequent": 7}, {"infrequent": 4, "frequent": 8}, {"infrequent": 4, "frequent": 9}, {"infrequent": 4, "frequent": 10}, {"infrequent": 4, "frequent": 11}, {"infrequent": 5, "frequent": 11}, {"infrequent": 5, "frequent": 12}, {"infrequent": 5, "frequent": 13}, {"infrequent": 5, "frequent": 14}, {"infrequent": 5, "frequent": 15}, {"infrequent": 5, "frequent": 16}, {"infrequent": 5, "frequent": 17}, {"infrequent": 5, "frequent": 18}, {"infrequent": 5, "frequent": 19}, {"infrequent": 5, "frequent": 20}, {"infrequent": 6, "frequent": 20}, {"infrequent": 6, "frequent": 21}, {"infrequent": 7, "frequent": 21}, {"infrequent": 7, "frequent": 22}, {"infrequent": 7, "frequent": 23}, {"infrequent": 7, "frequent": 24}], "98.169.35.68": [{"frequent": 1}, {"frequent": 2}, {"frequent": 3}, {"infrequent": 1, "frequent": 3}, {"infrequent": 1, "frequent": 4}, {"infrequent": 1, "frequent": 5}, {"infrequent": 2, "frequent": 5}, {"infrequent": 2, "frequent": 6}, {"infrequent": 2, "frequent": 7}, {"infrequent": 3, "frequent": 7}, {"infrequent": 4, "frequent": 7}, {"infrequent": 4, "frequent": 8}, {"infrequent": 4, "frequent": 9}, {"infrequent": 4, "frequent": 10}, {"infrequent": 4, "frequent": 11}, {"infrequent": 5, "frequent": 11}, {"infrequent": 5, "frequent": 12}, {"infrequent": 5, "frequent": 13}, {"infrequent": 5, "frequent": 14}, {"infrequent": 5, "frequent": 15}, {"infrequent": 5, "frequent": 16}, {"infrequent": 5, "frequent": 17}, {"infrequent": 5, "frequent": 18}, {"infrequent": 6, "frequent": 18}, {"infrequent": 6, "frequent": 19}, {"infrequent": 6, "frequent": 20}, {"infrequent": 6, "frequent": 21}, {"infrequent": 6, "frequent": 22}, {"infrequent": 7, "frequent": 22}, {"infrequent": 7, "frequent": 23}, {"infrequent": 8, "frequent": 23}], "59.98.251.98": [{"frequent": 1}, {"infrequent": 1, "frequent": 1}, {"infrequent": 1, "frequent": 2}, {"infrequent": 1, "frequent": 3}, {"infrequent": 1, "frequent": 4}, {"infrequent": 2, "frequent": 4}, {"infrequent": 2, "frequent": 5}, {"infrequent": 2, "frequent": 6}, {"infrequent": 3, "frequent": 6}, {"infrequent": 3, "frequent": 7}, {"infrequent": 3, "frequent": 8}, {"infrequent": 3, "frequent": 9}, {"infrequent": 3, "frequent": 10}, {"infrequent": 3, "frequent": 11}, {"infrequent": 3, "frequent": 12}, {"infrequent": 4, "frequent": 12}, {"infrequent": 5, "frequent": 12}, {"infrequent": 5, "frequent": 13}, {"infrequent": 5, "frequent": 14}, {"infrequent": 5, "frequent": 15}, {"infrequent": 5, "frequent": 16}, {"infrequent": 5, "frequent": 17}, {"infrequent": 5, "frequent": 18}, {"infrequent": 5, "frequent": 19}, {"infrequent": 5, "frequent": 20}, {"infrequent": 5, "frequent": 21}, {"infrequent": 6, "frequent": 21}, {"infrequent": 6, "frequent": 22}, {"infrequent": 6, "frequent": 23}, {"infrequent": 7, "frequent": 23}, {"infrequent": 7, "frequent": 24}], "100.2.122.157": [{"frequent": 1}, {"frequent": 2}, {"frequent": 3}, {"frequent": 4}, {"infrequent": 1, "frequent": 4}, {"infrequent": 1, "frequent": 5}, {"infrequent": 1, "frequent": 6}, {"infrequent": 1, "frequent": 7}, {"infrequent": 1, "frequent": 8}, {"infrequent": 1, "frequent": 9}, {"infrequent": 2, "frequent": 9}, {"infrequent": 3, "frequent": 9}, {"infrequent": 3, "frequent": 10}, {"infrequent": 4, "frequent": 10}, {"infrequent": 4, "frequent": 11}, {"infrequent": 4, "frequent": 12}, {"infrequent": 4, "frequent": 13}, {"infrequent": 4, "frequent": 14}, {"infrequent": 4, "frequent": 15}, {"infrequent": 5, "frequent": 15}, {"infrequent": 5, "frequent": 16}, {"infrequent": 6, "frequent": 16}, {"infrequent": 6, "frequent": 17}, {"infrequent": 6, "frequent": 18}, {"infrequent": 7, "frequent": 18}, {"infrequent": 7, "frequent": 19}, {"infrequent": 7, "frequent": 20}, {"infrequent": 7, "frequent": 21}, {"infrequent": 7, "frequent": 22}, {"infrequent": 8, "frequent": 22}, {"infrequent": 8, "frequent": 23}]}
var particpantParams = [{"IP":"100.10.40.83","alpha":25,"depth":1,"inferredCondition":"combined"},{"IP":"100.2.122.157","alpha":16,"depth":2,"inferredCondition":"combined"},{"IP":"108.196.136.202","alpha":7,"depth":1,"inferredCondition":"conventionalized"}]
var IPs = _.keys(participantData)

mapData({data: IPs}, function(IP) {
  var currentParticipantData = participantData[IP]
  var speakerParams = getSubjectParams(IP)
//   var speaker = getSpeakerAndParams(speakerParams)[0]
//   var params = getSpeakerAndParams(speakerParams)[1]
//   print(params['alpha'])
//   print(params['depth'])
//   mapData({data: currentParticipantData}, function(datum) {
//     var frequentCnt = datum.frequent ? datum.frequent : 1
//     var infrequentCnt = datum.infrequent ? datum.infrequent : 1
//     return Math.exp(speaker('zopudon', {'pMeanings': [frequentCnt, infrequentCnt], 'alpha': params['alpha']}).score('zop'))
//   })
})
