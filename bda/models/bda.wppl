/* bda.wppl

Full model with RSA alpha and recursion parameters.

*/

var geometric = function(p) {
  return flip(p) ? geometric() + 1 : 0;
}

var Geometric = function(p) {
  Infer({method: 'enumerate', maxExecutions: 10}, function() {
    geometric(p)
  })
}

// Get modal value of discrete (assumed categorical) distribution
var getModalValue = function(dist) {
  var supp = dist.support()
  var scores = map(function(x) {Math.exp(dist.score(x))}, supp)
  var maxVal = _.max(scores)
  var maxIdx = _.indexOf(scores, maxVal)
  return supp[maxIdx]
}

// Meanings and utterances
var utterances = ['zop', 'zopudon', 'zopekil']
var utterancesPrior = function() {
  return uniformDraw(utterances)
}
var meanings = ['zopudon', 'zopekil']


var alwaysShort = function(m, params) {
  Infer({method: 'enumerate'}, function() {
    return 'zop'
  })
}

var alwaysLong = function(m, params) {
  Infer({method: 'enumerate'}, function() {
    return 'zopudon'
  })
}

var cost = function(u, params) {
  var costs = {
    'zop': params['costs'][0],
    'zopudon': params['costs'][1],
    'zopekil': params['costs'][2]
  }
  return costs[u]
}

var S0 = cache(function(m, params) {
  /* Literal speaker only considers costs.

  Example params:

    {alpha: 1, 'pMeanings': [24, 8], 'costs': [1, 1, 1]}

  */
  Infer({method: 'enumerate'}, function() {
    var u = utterancesPrior()
    factor(params['alpha'] * -cost(u, params))
    return u
  })
})

var litMeaning = cache(function(u, m) {
  /* Literal semantics function.

  \delta(u, m) returns 0/1

  */
  return u == 'zop' ? true : u == m
})

var L0 = cache(function(u, params) {
  /* Literal listener

  Recursion base-case, reasons about literal semantics.

  */
	Infer({method: 'enumerate'}, function() {
      var m = categorical({vs: meanings, ps: params['pMeanings']})
      condition(litMeaning(u, m))
      return m
    })
})

var S1 = cache(function(m, params) {
  /* First order speaker

  Reasons abou literal listener.

  Chooses an utterances by considering the it's cost and the
  informativity w.r.t to the listener.

  */
	Infer({method: 'enumerate'}, function()  {
      var u = utterancesPrior()
      var L = L0(u, params)
      factor(params['alpha'] * (L.score(m) - cost(u, params)))
      return u
    })
})

var L1 = cache(function(u, params) {
  /* First order listener

  Reasons about S1 speaker.

  Chooses an utterances by considering the it's cost and the
  informativity w.r.t to the listener.

  */
	Infer({method: 'enumerate'}, function() {
      var m = categorical({vs: meanings, ps: params['pMeanings']})
      var S = S1(m, params)
      factor(S.score(u))
      return m
    })
})

var S2 = cache(function(m, params) {
	Infer({method: 'enumerate'}, function()  {
      var u = utterancesPrior()
      var L = L1(u, params)
      factor(params['alpha'] * (L.score(m) - cost(u, params)))
      return u
    })
})

var L2 = cache(function(u, params) {
	Infer({method: 'enumerate'}, function() {
      var m = categorical({vs: meanings, ps: params['pMeanings']})
      var S = S2(m, params)
      factor(S.score(u))
      return m
    })
})

var S3 = cache(function(m, params) {
	Infer({method: 'enumerate'}, function()  {
      var u = utterancesPrior()
      var L = L2(u, params)
      factor(params['alpha'] * (L.score(m) - cost(u, params)))
      return u
    })
})


var getSpeakerModel = function(conditionType, depth) {
  /*
  Return a speaker model's recursive depth (1-3)

  Note that if condition is time (or neither) there 
  is no listener.
  */
  var recursiveSpeakers = {
    '1': S1,
    '2': S2,
    '3': S3
  }
  return conditionType == 'time' ? S0 : recursiveSpeakers[depth]
}

var getConditionParams = cache(function(conditionType) {
  /*

  Get condition params (conditions as instantiated in Kanwall (2017)

  https://www.ncbi.nlm.nih.gov/pubmed/28494263

  */
  var params = {
    'combined': {'costs': [1, 2, 2], 'pMeanings': [24, 8]},
    'conventionalized': {'costs': [1, 2, 2], 'pMeanings': [8, 24]},
    'accuracy': {'costs': [1, 1, 1],  'pMeanings': [24, 8]},
    'time': {'costs': [1, 2, 2], 'pMeanings': [24, 8]},
    'neither': {'costs': [1, 1, 1], 'pMeanings': [24, 8]}
  }
  return params[conditionType]
})

var countIsShort = function(utterances) {
  return sum(map(function(x) {return x == 'zop'}, utterances))
}

var runExperiment = function(subjParams, displayType, n) {
  /* Run a subject through the experiment.


  Parameters
  ----------
  subjParams: dict
    Subject level params (e.g. alpha, depth, etc.)
  displayType: string
    One of 'frequent', 'infrequent'
  n: int
    Number of samples from speaker.

  Returns
  -------
  int
    Number of short utterances ('zop')

  */

  // Get subject strategy (condition)
  var conditionType = subjParams['conditionType']
  // Get subject alpha
  var alpha = subjParams['alpha']
  // Get subject depth
  var depth = subjParams['depth']
  // Get subject attention
  var attention = subjParams['attention']
  var speaker = getSpeakerModel(conditionType, depth)
  var params = _.merge(getConditionParams(conditionType), {'alpha': alpha})
  var meaning = displayType == 'frequent' ? 'zopudon' : 'zopekil'
  var speak = function() {
    return flip(attention) ?
      sample(speaker(meaning, params)) : 
      uniformDraw(utterances) // Random choice of utterance
  }
  var utterances_ = repeat(n, speak)
  return countIsShort(utterances_)
}

// Note we share inference options between subject param inference and posterior modeling
var opts = {'method': 'MCMC', 'samples': 400, 'burn': 100, 'kernel': 'MH'}
var runSubject = function(subjId, alpha, depth, conditionType, attention, displayType, n) {
  /* Return a distribution over a participants use of the short form.

  Returns
  -------
  Distr
    Distribution over number of times short form is used.

  */
  Infer(opts, function() {
    var params = {
      'alpha': alpha,
      'depth': depth,
      'conditionType': conditionType,
      'attention': attention
    }
    return runExperiment(params, displayType, n)
  })
}

var inferSubjParams = function(datum) {
  /* Infer parameters for a single subject.

  Returns
  -------
  dict
    Dictionary of subject-level parameters.

  */
  Infer(opts, function() {
    var depth = uniformDraw(['1', '2', '3'])
    var conditionType = categorical({vs: ['combined', 'accuracy', 'time', 'conventionalized'], ps: [10, 10, 10, 1]})
    var alpha = uniformDraw(_.range(1, 30))
    var attention = beta(12, 1)
    observe(runSubject(datum.IP, alpha, depth, conditionType, attention, 'frequent', datum.frequent_n), datum.frequent_cnt)
    observe(runSubject(datum.IP, alpha, depth, conditionType, attention, 'infrequent', datum.infrequent_n), datum.infrequent_cnt)
    return {
      'inferredAlpha': alpha, 
      'inferredDepth': depth,
      'inferredCondition': conditionType, 
      'inferredAttention': attention
    }
  })
}

var results = mapData({data: rData}, function(datum) {
	console.log("Running IP: ", datum.IP)
	var inferredSubjParams = inferSubjParams(datum)
   
	var alpha = sample(marginalize(inferredSubjParams, function(x) {
		return x['inferredAlpha']
	}))
  var depth = sample(marginalize(inferredSubjParams, function(x) {
		return x['inferredDepth']
	}))
	var inferredCondition = getModalValue(marginalize(inferredSubjParams, function(x) {
		return x['inferredCondition']
	}))
	var attention = marginalize(inferredSubjParams, function(x) {
		return x['inferredAttention']
	})
  var inferredAttention = expectation(attention)
  var posteriorFrequent = runSubject(datum.IP, alpha, depth, inferredCondition, inferredAttention, 'frequent', datum.frequent_n)
  var posteriorInfrequent = runSubject(datum.IP, alpha, depth, inferredCondition, inferredAttention, 'infrequent', datum.infrequent_n)
  var posteriorPredictiveFrequent = expectation(posteriorFrequent)
  var posteriorPredictiveInfrequent = expectation(posteriorInfrequent)
  var scoreFrequent = posteriorFrequent.score(datum.frequent_cnt)
  var scoreInfrequent = posteriorInfrequent.score(datum.infrequent_cnt)
  var result = {
      'IP': datum.IP,
      'alpha': alpha,
      'depth': depth,
      'inferredCondition': inferredCondition,
      'inferredAttention': inferredAttention,
      'actualCondition': datum.condition,
      'actualFrequent': datum.frequent_cnt,
      'actualInfrequent': datum.infrequent_cnt,
      'posteriorPredictiveFrequent': expectation(posteriorFrequent),
      'posteriorPredictiveInfrequent': expectation(posteriorInfrequent),
      'scoreFrequent': scoreFrequent,
      'scoreInfrequent': scoreInfrequent
  }
  return result
})
results